
import java.time.LocalDate;
import com.bochkov.shift.planning.DutyPlan;
import com.bochkov.shift.planning.DutyPlanOptions;
import com.bochkov.shift.planning.DutyAssigment;
import com.bochkov.shift.jpa.entity.Person;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;
import org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics;
import com.bochkov.shift.planning.service.PersonDutyCount;
import com.bochkov.shift.jpa.entity.OvertimeData;
import org.apache.commons.lang3.tuple.Pair;

global  HardMediumSoftScoreHolder scoreHolder;


// A nurse can only work one shift per day, i.e. no two shift can be assigned to the same nurse on a day.
rule "нельзя дежурства без людей"
    when
        DutyAssigment(employee==null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

rule "вид дежурства только предусмотренный для сотрудника"
    when
        DutyAssigment(employee!=null,$employee:employee,$shiftType:shiftType,employee.shiftTypes not contains shiftType)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "нет дежурств после ночного длящегося дежурства"
    when
        DutyAssigment(employee!=null,$employee:employee, $dayIndex:dayIndex,endOnNextDay==true)
        DutyAssigment($employee==employee,$dayIndex+1==dayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "только 1 дежурство  на 1 человека в 1 день"
    when
        DutyAssigment(employee!=null, $employee:employee,$id:id,$dayIndex:dayIndex)
        DutyAssigment(employee==$employee,$id<id,dayIndex==$dayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "нельзя дежурства за подряд"

    when
        DutyPlanOptions($minInterval:minInterval)
        $da1:DutyAssigment(employee!=null, $employee:=employee,$dayIndex:=dayIndex,$shiftType:=shiftType)
        $da2:DutyAssigment(employee!=null, $employee==employee,$dayIndex<dayIndex,dayIndex-$dayIndex<=$minInterval,$shiftType==shiftType)

    then
        scoreHolder.addMediumConstraintMatch(kcontext,( $da2.getDayIndex()-$da1.getDayIndex())-7);
end


rule "нельзя дежурства в выходные за подряд"

    when
        $da1:DutyAssigment(employee!=null, $employee:=employee,$dayIndex:=dayIndex,weekend==true,$shiftType:=shiftType)
        $da2:DutyAssigment(employee!=null, $employee==employee,weekend==true,$dayIndex<dayIndex,dayIndex-$dayIndex<=7,$shiftType==shiftType)

    then
        scoreHolder.addMediumConstraintMatch(kcontext,( $da2.getDayIndex()-$da1.getDayIndex())-7);
end





rule "распределение дежурств у людей"

    when
       accumulate(
           DutyAssigment(employee != null,$p : employee);
           $total : loadBalanceByCount($p)
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по видам дежурств"

    when
       accumulate(
           DutyAssigment(employee != null,$shiftType:shiftType ,$p : employee);
           $total : loadBalanceByCount(Pair.of($p,$shiftType))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по видам дней"

    when
       accumulate(
           DutyAssigment(employee != null, $p : employee,$dayOfWeek:dayOfWeek);
           $total : loadBalanceByCount(Pair.of($p,$dayOfWeek))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по неделям"

    when
       accumulate(
           $da:DutyAssigment(employee != null, $p : employee,$week:weekIndex);
           $total : loadBalanceByCount(Pair.of($p,$week))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end


rule "распределение дежурств у людей по выходным"
    when
       accumulate(
           DutyAssigment(employee != null , weekend, $p : employee);
           $total : loadBalanceByCount($p)
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis()*10);
end



rule "распределение дежурств у людей по времени"
    when
    accumulate(
        $employee : Person()
        and accumulate(
            DutyAssigment(employee == $employee,$time:overTime.toHours());
            $overtime: sum($time)
        );
        $total : loadBalance($overtime)
        )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getMeanDeviationSquaredSumRootMillis());
end


import accumulate com.bochkov.shift.planning.service.functions.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate com.bochkov.shift.planning.service.functions.LoadBalanceAccumulateFunction loadBalance;