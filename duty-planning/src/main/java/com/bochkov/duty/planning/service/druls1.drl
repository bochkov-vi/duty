
import java.time.LocalDate;
import com.bochkov.duty.planning.DutyPlan;
import com.bochkov.duty.planning.DutyPlanOptions;
import com.bochkov.duty.planning.DutyAssigment;
import com.bochkov.duty.jpa.entity.Person;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;
import org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics;
import com.bochkov.duty.planning.service.PersonDutyCount;
import com.bochkov.duty.jpa.entity.OvertimeData;
import org.apache.commons.lang3.tuple.Pair;

global  HardMediumSoftScoreHolder scoreHolder;


// A nurse can only work one shift per day, i.e. no two shift can be assigned to the same nurse on a day.
rule "нельзя дежурства без людей"
    when
        DutyAssigment(person==null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

rule "вид дежурства только предусмотренный для сотрудника"
    when
        DutyAssigment(person!=null,$person:person,$dutyType:dutyType,person.dutyTypes not contains dutyType)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "нет дежурств после ночного длящегося дежурства"
    when
        DutyAssigment(person!=null,$person:person, $dayIndex:dayIndex,endOnNextDay==true)
        DutyAssigment($person==person,$dayIndex+1==dayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "только 1 дежурство  на 1 человека в 1 день"
    when
        DutyAssigment(person!=null, $person:person,$id:id,$dayIndex:dayIndex)
        DutyAssigment(person==$person,$id<id,dayIndex==$dayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "нельзя дежурства за подряд"

    when
        DutyPlanOptions($minInterval:minInterval)
        $da1:DutyAssigment(person!=null, $person:=person,$dayIndex:=dayIndex,$dutyType:=dutyType)
        $da2:DutyAssigment(person!=null, $person==person,$dayIndex<dayIndex,dayIndex-$dayIndex<=$minInterval,$dutyType==dutyType)

    then
        scoreHolder.addMediumConstraintMatch(kcontext,( $da2.getDayIndex()-$da1.getDayIndex())-7);
end


rule "нельзя дежурства в выходные за подряд"

    when
        $da1:DutyAssigment(person!=null, $person:=person,$dayIndex:=dayIndex,weekend==true,$dutyType:=dutyType)
        $da2:DutyAssigment(person!=null, $person==person,weekend==true,$dayIndex<dayIndex,dayIndex-$dayIndex<=7,$dutyType==dutyType)

    then
        scoreHolder.addMediumConstraintMatch(kcontext,( $da2.getDayIndex()-$da1.getDayIndex())-7);
end





rule "распределение дежурств у людей"

    when
       accumulate(
           DutyAssigment(person != null,$p : person);
           $total : loadBalanceByCount($p)
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по видам дежурств"

    when
       accumulate(
           DutyAssigment(person != null,$dutyType:dutyType ,$p : person);
           $total : loadBalanceByCount(Pair.of($p,$dutyType))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по видам дней"

    when
       accumulate(
           DutyAssigment(person != null, $p : person,$dayOfWeek:dayOfWeek);
           $total : loadBalanceByCount(Pair.of($p,$dayOfWeek))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end

rule "распределение дежурств у людей по неделям"

    when
       accumulate(
           $da:DutyAssigment(person != null, $p : person,$week:weekIndex);
           $total : loadBalanceByCount(Pair.of($p,$week))
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis());
end


rule "распределение дежурств у людей по выходным"
    when
       accumulate(
           DutyAssigment(person != null , weekend, $p : person);
           $total : loadBalanceByCount($p)
       )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getZeroDeviationSquaredSumRootMillis()*10);
end



rule "распределение дежурств у людей по времени"
    when
    accumulate(
        $person : Person()
        and accumulate(
            DutyAssigment(person == $person,$time:overTime.toHours());
            $overtime: sum($time)
        );
        $total : loadBalance($overtime)
        )
    then
       // System.out.println("variance is " + $result);
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) $total.getMeanDeviationSquaredSumRootMillis());
end


import accumulate com.bochkov.duty.planning.service.functions.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate com.bochkov.duty.planning.service.functions.LoadBalanceAccumulateFunction loadBalance;